text = """
#################################################################################
#.....#.............#.....#g......#.....#..............i..#.....#.......#.......#
#.###.###.#########.#.###.#.#.###.#.###.#########.#######.#.###.#####.#.#######.#
#...#...#.....#...#.#.#..e#.#...#.#...#.#......f..#.....#...#.#.#.....#...#.....#
#.#.###.#####.#.###.#.#####.###H###.###.#.#########.#.#######.#.#.#######.#.###.#
#.#t#...#.....#.#...#...#...#.#.....#...#.#.......#.#.........#...#.#.....#.#.#.#
#.#.#.###.#####.#.#####.#.###.#######.#.#.#.#####.#.#########.#####.#.#####.#A#.#
#.#.#.....#..c..#...#...#...#...#.#...#.#...#.#...#.#...#...#.............Q.#...#
###.#######.#######.#.#####.#.#.#.#.###.#.###.#.###.#.###.#.#.#################.#
#...#.....#.....#...#.........#...#.#...#.#...#.#.#...#...#.#...#...#...#.....#.#
#.###.###.#.###.#.#################.#####.#.#.#.#.#.###.###.###.###.#.#.#.###.#.#
#.#.#...#.#...#...........#.......#.#...#.#.#.#.#...#...#...#.......#.#...#...#.#
#.#.#.#.###.#############.#.#####.#.#.#.#.#.#.#.#.###.###.#.#########.#####.###.#
#.#.#.#.....#.........J.#...#...#.#...#.#...#.#.#.#...#.#.#.#...#.......#...#.#k#
#.#.#.#######.#########.#####.###.#.###.#####.#.###.###.#.###.#.#.#####.#.###.#.#
#.#.........#.........#...#.......#.#...#...#.#......l..#.....#...#...#.#...#...#
#.#####.#########.#######.#.#########.#.#.#.###########.#####.#####.#.#####.#.###
#.#...#.#.....#.#.#.......#...#.......#.#.#...........#.#...#...#...#.......#.#.#
#.#.#.###.#.#.#.#W#.#########.#.#######.#.###########.###.#.#####.###########.#.#
#.#.#.....#.#...#.#...#.....#..o#.....#.#.....#.....#.....#....r..#..z#.#.....#.#
#.#.#######.###.#.###M#.#.###########.#.#.###.###.#.#####.#########.#.#.#.#####.#
#.#.#.#.....#...#...#.#.#.#.........#.#.#y#.#...#.#.#.....#...#.....#...#.#.....#
#.#.#.#.#####.#####.###.###.###.###.#.#.#.#.###.###.#.#####.###.#######.#.###.###
#...#.#.#...#.....#...#.#...#.#...#...#.#.....#...#.#.#...#...#...#.#...#...#m..#
#.###.#.###.#####.###.#.#.###.###.#####.#########.#.#.#.#####.###.#.#.#####.#.#.#
#.#...#...#.......#...#...#...#...#.....#.........#...#.....#.#...#.Z.#.U.#.#.#.#
#.###.###.#.#######.###.###.#.#.###.#####.###########.#.###.#.#.###.###.#.#.###.#
#...#...#.#.#.....X.#.#.#...#.#.....#d..#...........#.#...#.#.#.#u....#.#.#...#.#
###.#.###.#.#.#######.#.#.###.#######.#.#.#########.#.#####.#.#.#####.###.###.#.#
#.#.#.#...#.#.....#...#...#.#.....#...#.#.#.........#.......#.#.....#.....#.V.#.#
#.#.#.#.###.#####.#.#.#####.#####.#.#######.#########.#######.#.###.#.#####.###.#
#.....#...#.#...#.#.#.......#...#.#.....#...#.......#.#.....#.#...#.#.#..x#.#...#
#.#######.#.#.###.#.#####.###.#.#.#####.#.###.#####.###.###N#.#.###.###.#.#.###.#
#.#...#...#.#.#...#...#.#...#.#...#...#.#...#.#...#...#.#...#.#.#...#...#...#j..#
#.#.#.#.###.#.#.#####.#.###.#.#####.#.#.#.#.#.#.#.###.#.#.###.###.###.#######.###
#.#.#...#.....#.....#...#...#...#...#...#.#.#.#.#...#...#...#...#...#...#.......#
#.#.###.###########.###.#.#####.#.#.#######.#.#.###.#######.###.###.###.#.#####.#
#.#...#.#.....#.....#...#.....#.#.#.....#...#...#.#.#.P...#...#.#...#...#.#.....#
#.###.###.###.#.#####.#######.#.#######.#.#######.#.#####.###.#.#.###.#####.###.#
#...#.......#.K.#...........#..p............................#...#...........#...#
#######################################.@.#######################################
#.B.....#.....#.............#...............#.......#.....#...........#...#.....#
#####.#.#.#.###.#########.#.#.#.#########.###.#.###.###.#.#.#.#########.#.#.#.###
#...#.#.#.#.....#.........#.#.#.#.......#.#...#...#.....#.#.#.#...#.....#...#...#
#.#.#.###.#######.#########.###.#.#####.#.#.#####.#######.#.#.#.#.#.###########.#
#.#...#...#n......#...#.........#...#...#.#...#.#...#...#.#.#b#.#...#...#.....#.#
#.###.#.###.#######.#.#.###########.#.#.#.###.#.###.#.#.#.#.###.#######.#.###.#.#
#...#.#.#.#...#.....#.#.#.........#.#.#.#...#...#.#.#.#.#.#...#.#.......#.#...#.#
#.#.###.#.###.#####.#.#.#.#####.###.#.#.#.#.###.#.#.###.#.###.#.#.###.###.#.###.#
#.#.#.......#.....#.#...#.#...#.....#.#.#.#.#...#.#...#.......#.#...#.#...#.#...#
#.#.#.###########.#.#####.#.#########.#.#.###.###.###.#########.#.#.#.#.###.###.#
#.#...#.....#...#.#.....#.#.......#...#.#.....#.....#...........#.#.#.#.#...#...#
#######.###.#.#.#.#####.#.#.#.###.#.###.#.#######.#.#############.#.#.#.#.###.#.#
#.......#...#.#.#...#...#.#.#.#...#.#...#.#.......#...#.........#.#.#.#.#.....#.#
#.#######.###.#.#.#.#####.#.#.#.###.#.###.#.#########.###.#####S###.#.#.#######.#
#......a#....v#.#.#.......#.#.#...#.#.#.#.#...#.#.....#...#...#.....#.#...#.....#
#######.#######.###.#########.###.#.#.#.#.###.#.#.#####.###.#.#######.###.###.###
#.......#.....#...#.....#...#.#.#.#.#.#.#...#.#.....#...#.#.#.#.........#...#...#
#.#######.#.#####.#####.#.#.#.#.#.#.#.#.###.#.#####.#.###.#.#.#.#######.###.#####
#.....#...#.....#.#.......#...#.#.#.#...#.#.#...#.#.#.#...#.#...#.....#...#.....#
#####.#.#######.#.#############.#.#.###.#.#.###.#.#.#.#.#.#.###.#.###.###.#####.#
#...#.#.......#.#...#.#.........#.#.#...#.#.#...#.....#.#...#.#.#.#.#.#.#.#...#.#
#.#.#.#########.###.#.###.#.###.#.#.###.#.#.#.#############.#.###.#.#.#.#.#.#.#.#
#.#.#q....#...#...#.#...#.#...#.#.#...#.#...#.....#.......#.#.....#.#.#.#.#.#.#.#
#.#.#####.#.#.#.###.###.###.#.###.###.#.#.#####.#.#.#####.#.#######.#.#.#.#.#.#.#
#.#.....#...#...#.....#...#.#...#...#.#.#.....#.#...#.....#.......#...#...#.#...#
#######.#######.#.###.###.#####.###.#.#######.#######.#.###########.###.###.#####
#.....I.#.......#...#.#.#.....#.#...#...#.D...#.......#.#.......#...#.....#.#...#
#.#####.#.#########.#.#.#####.#.#.#####.#.#####.#######.#.#####.#.#########.###.#
#.#...#.#.#...#...#w#...#.....#...#...#.#...#...#.......#.#.....#.......#...#...#
#.###.#.#.#.#.#.###.#####.#####.###.#.#.###.#.#.#####.###G#.###########.#.###.###
#...#...#...#.#...#.....#.#...#.#.#.#...#.#.#.#.....#...#.#.#.........#...#.....#
#.#.###.#####.###.#####.#.#.###.#.#.#####.#.#######.#####.#.#.#######.#####.###.#
#.#...#..s#.F.#...T.#.#...#.......#.#...#.#.......#.......#.#.#.#.....#...#...#.#
#.###.###.#.###.###.#.#####.#######.#.#.#.#######.#.#######.#.#.#R###.#.#.#.###.#
#.#...#...#...#.#...#...#.....#...#...#.#...#.....#...#...#.#.#.#.#.#.#.#.#.#..h#
#.#.#########.#.#.###.#.#######.#C#####.###.#.#########.#.#.#.#.#.#O#.###.#.#.#.#
#.#.#...#...#...#.#.L.#.#...#...#.....#.#...#...#...#...#.#.....#.#.#...#...#.#.#
#.#.#.#.#.#.#####.###.#.#E#.#.#######.#.#.#####.#.#Y#.###.#######.#.###.#####.#.#
#.#...#...#...........#...#...#.........#.........#...#...........#...........#.#
#################################################################################
""".strip()


import numpy as np
import networkx as nx
import itertools as it
from collections import deque, defaultdict


class Solver:
    def __init__(self, text, first_problem):
        self.N = 1 if first_problem else 4
        self.board = self.build_board(text, first_problem)
        self.keys = self.get_keys()
        self.doors = self.get_doors()
        self.graph = self.build_graph()
        self.paths = self.get_shortest_paths()
        self.distances = self.compute_distance_between_pairs_of_keys()
        self.dependencies = self.get_keys_dependencies()
        self.crossing = self.get_keys_crossing()
        self.positions_cache = dict()
        
    def build_board(self, text, first_problem):
        board = np.array([list(x) for x in text.splitlines()])
        if first_problem:
            return {0: board}
        i, j = [int(x) for x in np.where(board == '@')]
        board[((i, i, i, i+1, i-1), (j-1, j, j+1, j, j))] = '#'
        board[((i-1, i-1, i+1, i+1), (j-1, j+1, j-1, j+1))] = '@'
        board = {
            0: board[:i+1, :j+1],
            1: board[:i+1, j:],
            2: board[i:, :j+1],
            3: board[i:, j:],
        }
        return board
    
    def get_keys(self):
        return {n: set(self.board[n][np.char.islower(self.board[n])].tolist()) | set(['@']) 
                for n in range(self.N)}
    
    def get_doors(self):
        return {n: set(self.board[n][np.char.isalpha(self.board[n]) & np.char.isupper(self.board[n])]) 
                for n in range(self.N)}

    def build_graph(self):
        graph = {n: nx.Graph() for n in range(self.N)}
        for n in range(self.N):
            walkable_positions = set(zip(*np.where(self.board[n] != '#')))
            queue = deque(walkable_positions)
            while queue:
                i, j = queue.pop()
                for i2, j2 in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:
                    if (i2, j2) in walkable_positions:
                        k1 = self.board[n][i, j] if self.board[n][i, j] in self.doors[n] | self.keys[n] else (i, j)
                        k2 = self.board[n][i2, j2] if self.board[n][i2, j2] in self.doors[n] | self.keys[n] else (i2, j2)
                        graph[n].add_edge(k1, k2)
        return graph
    
    def get_shortest_paths(self):
        paths = dict()
        for n in range(self.N):
            for k1, k2 in it.permutations(self.keys[n], 2):
                p = nx.shortest_path(self.graph[n], k1, k2)
                paths[(k1, k2)], paths[(k2, k1)] = p, p
        return paths
    
    def compute_distance_between_pairs_of_keys(self):
        distances = dict()
        for n in range(self.N):
            for k1, k2 in it.permutations(self.keys[n], 2):
                d = len(self.paths[(k1, k2)]) - 1
                distances[(k1, k2)], distances[(k2, k1)] = d, d
        return distances
    
    def get_keys_dependencies(self):
        dependencies = defaultdict(lambda: set())
        for n in range(self.N):
            for k1 in self.keys[n] - {'@'}:
                path_from_start = self.paths[('@', k1)]
                for k2 in path_from_start:
                    if k2 in self.doors[n]:
                        dependencies[k1].add(k2.lower())
        return dependencies
    
    def get_keys_crossing(self):
        crossing = defaultdict(lambda: set())
        for n in range(self.N):
            for k1, k2 in it.combinations(self.keys[n], 2):
                path = self.paths[(k1, k2)]
                for k3 in path[1:-1]:
                    if k3 != '@' and k3 in self.keys[n]:
                        crossing[(k1, k2)].add(k3.lower())
                        crossing[(k2, k1)].add(k3.lower())
        return crossing
    
    def get_directly_accessible_keys(self, current_keys, collected_keys):
        directly_accessible_keys = {n: set() for n in range(self.N)}
        for n in range(self.N):
            accessible_keys = set()
            for k1 in self.keys[n] - collected_keys - {'@'}:
                for k2 in self.dependencies[k1]:
                    if k2 not in collected_keys:
                        break
                else:
                    accessible_keys.add(k1)
            for k1 in accessible_keys:
                for k2 in self.crossing[(current_keys[n], k1)]:
                    if k2 not in collected_keys:
                        break
                else:
                    directly_accessible_keys[n].add(k1)
        return directly_accessible_keys

    def get_min_distance_to_keys(self, current_keys, collected_keys):
        position_hash = ''.join(sorted(collected_keys) + current_keys)
        if position_hash in self.positions_cache:
            return self.positions_cache[position_hash]
        accessible_keys = self.get_directly_accessible_keys(current_keys, collected_keys)
        if sum(len(x) for x in accessible_keys.values()) == 0:
            return 0
        min_distance = np.inf
        for n in range(self.N):
            for k in accessible_keys[n]:
                new_current_keys = current_keys.copy()
                new_current_keys[n] = k
                distance = self.distances[(current_keys[n], k)]
                distance += self.get_min_distance_to_keys(new_current_keys, collected_keys.union({k}))
                min_distance = min(min_distance, distance)
        self.positions_cache[position_hash] = min_distance
        return min_distance


# 1    
solver = Solver(text, first_problem=True)
print(solver.get_min_distance_to_keys(['@'], set()))

# 2
solver = Solver(text, first_problem=False)
print(solver.get_min_distance_to_keys(['@'] * 4, set()))

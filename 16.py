text = """

""".strip()


import numpy as np


# 1
signal = np.array(list(text)).astype(int)
ndigits = len(signal)
nphases = 100

base_pattern = np.array([0, 1, 0, -1])
patterns = {
    p : np.tile(np.repeat(base_pattern, p), ndigits // (base_pattern.size * p) + 1)[1:ndigits+1]
    for p in range(1, ndigits+1)
}

for _ in range(nphases):
    result = np.zeros_like(signal)
    for p in range(1, ndigits+1):
        result[p-1] = abs((patterns[p] * signal).sum()) % 10
    signal = result
print(''.join(signal.astype(str))[:8])


# 2
repeat = 10000
offset = 7
nphases = 100

signal = np.tile(np.array(list(text)).astype(int), 10000)
signal = signal[int(text[:offset]):][::-1]

for _ in range(nphases):
    signal = np.abs(np.cumsum(signal)) % 10
print(''.join(signal[-8:][::-1].astype(str)))
